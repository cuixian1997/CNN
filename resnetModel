import keras
import tensorflow as tf
from tensorflow.keras import layers,Sequential,Model

class BasicBlock(layers.Layer):
    def __init__(self, filter_num, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = layers.Conv2D(filter_num, (3, 3), strides=stride, padding='same')
        self.bn1 = layers.BatchNormalization()
        self.relu = layers.Activation('relu')
        self.conv2 = layers.Conv2D(filter_num, (3, 3), strides=1, padding='same')
        self.bn2 = layers.BatchNormalization()

        if stride != 1:
            self.downsample = Sequential()
            self.downsample.add(layers.Conv2D(filter_num, (1, 1), strides=stride))
        else:
            self.downsample = lambda x:x

    def call(self, inputs, training=None):
        # [b, h, w, c]
        out = self.conv1(inputs)
        out = self.bn1(out,training=training)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out,training=training)
        identity = self.downsample(inputs)
        output = layers.add([out, identity])
        output = tf.nn.relu(output)
        return output


class ResNet(keras.Model):
    def __init__(self, layers_dims, num_classes=10): # laters_dims表示每一次有几个Basic Block，
        super(ResNet,self).__init__()
        # 第一层
        self.stem = Sequential([layers.Conv2D(64,(3,3),strides=(1,1)),
                                layers.BatchNormalization(),
                                layers.Activation('relu'),
                                layers.MaxPool2D(pool_size=(2,2), strides=(1,1), padding='same'),
                                ])
        # res层
        self.layer1 = self.build_resblock(64,  layers_dims[0])
        self.layer2 = self.build_resblock(128, layers_dims[1], stride=2)
        self.layer3 = self.build_resblock(256, layers_dims[2], stride=2)
        self.layer4 = self.build_resblock(512, layers_dims[3], stride=2)

        # 分类层
        # resBlock出来以后并不清楚一个图片的shape，计算也有点麻烦，只知道是这样的：[b,512,h,w]
        # 通过全局平均层，我们直接将最后两个维度上的数据做一个平均，这样输出一定是[b,512]
        self.avgpool  = layers.GlobalAveragePooling2D()
        self.fc = layers.Dense(num_classes)

    def call(self, inputs, training=None):
        x = self.stem(inputs,training = training)   # 1层cov
        x = self.layer1(x, training = training)     # 4层cov
        x = self.layer2(x, training = training)     # 4层cov
        x = self.layer3(x, training = training)     # 4层cov
        x = self.layer4(x, training = training)# 输出[b,512]   4层cov
        x = self.avgpool(x)
        out = self.fc(x)  # 输出[b,10]              # 1层Dense，共16层
        return out

    def build_resblock(self, filter_num, blocks, stride=1):
        res_block = Sequential()
        res_block.add(BasicBlock(filter_num, stride))
        # 只有第一个block具有下采样功能，其余block没有下采样功能
        for _ in range(1, blocks):
            res_block.add(BasicBlock(filter_num,stride = 1))
        return res_block

def ResNet18():
    return ResNet([2,2,2,2])

def ResNet34():
    return ResNet([3,4,6,3])
